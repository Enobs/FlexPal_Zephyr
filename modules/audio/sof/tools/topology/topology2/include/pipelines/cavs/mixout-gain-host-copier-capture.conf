#
# FE capture pipeline: mixout-gain-host-copier-capture
#
# All attributes defined herein are namespaced
# by alsatplg to "Object.Pipeline.mixout-gain-host-copier-capture.N.attribute_name"
#
# Usage: mixout-gain-host-copier-capture pipeline object can be instantiated as:
#
# Object.Pipeline.mixout-gain-host-copier-capture."N" {
# 	period		1000
# 	time_domain	"timer"
# 	channels	2
# 	rate		48000
# }
#
# Where N is the unique pipeline ID within the same alsaconf node.
#

<include/common/audio_format.conf>
<include/components/copier.conf>
<include/components/mixout.conf>
<include/components/pipeline.conf>
<include/components/gain.conf>

Class.Pipeline."mixout-gain-host-copier-capture" {

	DefineAttribute."index" {}

	<include/pipelines/pipeline-common.conf>

	attributes {
		!constructor [
			"index"
		]

		!immutable [
			"direction"
		]

		#
		# mixout-gain-host-copier-capture objects instantiated within the same alsaconf node must have
		# unique pipeline_id attribute
		#
		unique	"instance"
	}

	Object.Widget {
		mixout."1" {}

		copier."1" {
			copier_type "host"
			type	"aif_out"
			node_type $HDA_HOST_INPUT_CLASS
			num_audio_formats 4
			num_input_audio_formats 4
			num_output_audio_formats 4
			# 16-bit 48KHz 2ch
			Object.Base.audio_format.1 {
				in_bit_depth		32
				in_valid_bit_depth	32
			}
			# 24-bit 48KHz 2ch
			Object.Base.audio_format.2 {
				in_bit_depth		32
				in_valid_bit_depth	32
				out_bit_depth		32
				out_valid_bit_depth	24
			}

			Object.Base.audio_format.3 {
				in_bit_depth		32
				in_valid_bit_depth	24
				out_bit_depth		32
				out_valid_bit_depth	24
			}

			# 32-bit 48KHz 2ch
			Object.Base.audio_format.4 {
				in_bit_depth		32
				in_valid_bit_depth	32
				out_bit_depth		32
				out_valid_bit_depth	32
			}
		}

		gain."1"{
			num_audio_formats 2
			num_input_audio_formats 2
			num_output_audio_formats 2

			# 32-bit 48KHz 2ch
			Object.Base.audio_format.1 {
				in_bit_depth		32
				in_valid_bit_depth	24
				out_bit_depth		32
				out_valid_bit_depth	24
			}

			Object.Base.audio_format.2 {
				in_bit_depth		32
				in_valid_bit_depth	32
				out_bit_depth		32
				out_valid_bit_depth	32
			}
		}

		pipeline."1" {
			priority		0
			lp_mode		0
		}
	}

	Object.Base {
		route.1 {
			source	mixout.$index.1
			sink gain.$index.1
		}
		route.2 {
			source	gain.$index.1
			sink copier.host.$index.1
		}
	}

	direction	"capture"
	dynamic_pipeline 1
	time_domain	"timer"
	channels	2
	channels_min	2
	channels_max	2
	rate		48000
	rate_min	48000
	rate_max	48000
}
