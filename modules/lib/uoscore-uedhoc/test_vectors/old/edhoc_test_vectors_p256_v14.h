#ifndef EDHOC_TEST_VECTORS_P256_V14_H
#define EDHOC_TEST_VECTORS_P256_V14_H

#include <stdint.h>
#include <edhoc.h>

enum method_type T2_METHOD = (enum method_type)0x03;

uint8_t T2_SUITE_I[] = { 0x06, 0x02 };
uint8_t T2_SUITE_R[] = { 0x02 };

/*Initiator's ephemeral private key*/
uint8_t T2_X[] = { 0x36, 0x8e, 0xc1, 0xf6, 0x9a, 0xeb, 0x65, 0x9b,
		   0xa3, 0x7d, 0x5a, 0x8d, 0x45, 0xb2, 0x1b, 0xdc,
		   0x02, 0x99, 0xdc, 0xea, 0xa8, 0xef, 0x23, 0x5f,
		   0x3c, 0xa4, 0x2c, 0xe3, 0x53, 0x0f, 0x95, 0x25 };

/*Initiator's ephemeral public key*/
uint8_t T2_G_X[] = { 0x8a, 0xf6, 0xf4, 0x30, 0xeb, 0xe1, 0x8d, 0x34,
		     0x18, 0x40, 0x17, 0xa9, 0xa1, 0x1b, 0xf5, 0x11,
		     0xc8, 0xdf, 0xf8, 0xf8, 0x34, 0x73, 0x0b, 0x96,
		     0xc1, 0xb7, 0xc8, 0xdb, 0xca, 0x2f, 0xc3, 0xb6 };

uint8_t T2_C_I[] = { 0x37 };
uint8_t T2_EAD_1[] = {};
uint8_t T2_EAD_2[] = {};
uint8_t T2_EAD_3[] = {};
uint8_t T2_EAD_4[] = {};

/*Responder's ephemeral private key*/
uint8_t T2_Y[] = { 0xe2, 0xf4, 0x12, 0x67, 0x77, 0x20, 0x5e, 0x85,
		   0x3b, 0x43, 0x7d, 0x6e, 0xac, 0xa1, 0xe1, 0xf7,
		   0x53, 0xcd, 0xcc, 0x3e, 0x2c, 0x69, 0xfa, 0x88,
		   0x4b, 0x0a, 0x1a, 0x64, 0x09, 0x77, 0xe4, 0x18 };

/*Responder's ephemeral public key*/
uint8_t T2_G_Y[] = { 0x41, 0x97, 0x01, 0xd7, 0xf0, 0x0a, 0x26, 0xc2,
		     0xdc, 0x58, 0x7a, 0x36, 0xdd, 0x75, 0x25, 0x49,
		     0xf3, 0x37, 0x63, 0xc8, 0x93, 0x42, 0x2c, 0x8e,
		     0xa0, 0xf9, 0x55, 0xa1, 0x3a, 0x4f, 0xf5, 0xd5 };

/*Responder's private authentication key*/
uint8_t T2_R[] = { 0x72, 0xcc, 0x47, 0x61, 0xdb, 0xd4, 0xc7, 0x8f,
		   0x75, 0x89, 0x31, 0xaa, 0x58, 0x9d, 0x34, 0x8d,
		   0x1e, 0xf8, 0x74, 0xa7, 0xe3, 0x03, 0xed, 0xe2,
		   0xf1, 0x40, 0xdc, 0xf3, 0xe6, 0xaa, 0x4a, 0xac };

/*Responders's public authentication key*/
uint8_t T2_G_R[] = { 0xbb, 0xc3, 0x49, 0x60, 0x52, 0x6e, 0xa4, 0xd3,
		     0x2e, 0x94, 0x0c, 0xad, 0x2a, 0x23, 0x41, 0x48,
		     0xdd, 0xc2, 0x17, 0x91, 0xa1, 0x2a, 0xfb, 0xcb,
		     0xac, 0x93, 0x62, 0x20, 0x46, 0xdd, 0x44, 0xf0 };

/*Initiator's private authentication key*/
uint8_t T2_I[] = { 0xfb, 0x13, 0xad, 0xeb, 0x65, 0x18, 0xce, 0xe5,
		   0xf8, 0x84, 0x17, 0x66, 0x08, 0x41, 0x14, 0x2e,
		   0x83, 0x0a, 0x81, 0xfe, 0x33, 0x43, 0x80, 0xa9,
		   0x53, 0x40, 0x6a, 0x13, 0x05, 0xe8, 0x70, 0x6b };

uint8_t T2_G_I[] = { 0xac, 0x75, 0xe9, 0xec, 0xe3, 0xe5, 0x0b, 0xfc,
		     0x8e, 0xd6, 0x03, 0x99, 0x88, 0x95, 0x22, 0x40,
		     0x5c, 0x47, 0xbf, 0x16, 0xdf, 0x96, 0x66, 0x0a,
		     0x41, 0x29, 0x8c, 0xb4, 0x30, 0x7f, 0x7e, 0xb6 };

uint8_t T2_C_R[] = { 0x27 };

uint8_t T2_ID_CRED_R[] = { 0xa1, 0x04, 0x41, 0x32 };

/*CRED_R and CRED_I are provided in encoded form*/
uint8_t T2_CRED_R[] = {
	0xA2, 0x02, 0x6B, 0x65, 0x78, 0x61, 0x6D, 0x70, 0x6C, 0x65, 0x2E, 0x65,
	0x64, 0x75, 0x08, 0xA1, 0x01, 0xA5, 0x01, 0x02, 0x02, 0x41, 0x32, 0x20,
	0x01, 0x21, 0x58, 0x20, 0xBB, 0xC3, 0x49, 0x60, 0x52, 0x6E, 0xA4, 0xD3,
	0x2E, 0x94, 0x0C, 0xAD, 0x2A, 0x23, 0x41, 0x48, 0xDD, 0xC2, 0x17, 0x91,
	0xA1, 0x2A, 0xFB, 0xCB, 0xAC, 0x93, 0x62, 0x20, 0x46, 0xDD, 0x44, 0xF0,
	0x22, 0x58, 0x20, 0x45, 0x19, 0xE2, 0x57, 0x23, 0x6B, 0x2A, 0x0C, 0xE2,
	0x02, 0x3F, 0x09, 0x31, 0xF1, 0xF3, 0x86, 0xCA, 0x7A, 0xFD, 0xA6, 0x4F,
	0xCD, 0xE0, 0x10, 0x8C, 0x22, 0x4C, 0x51, 0xEA, 0xBF, 0x60, 0x72
};

uint8_t T2_ID_CRED_I[] = { 0xa1, 0x18, 0x22, 0x82, 0x2e, 0x48, 0xc2,
			   0x4a, 0xb2, 0xfd, 0x76, 0x43, 0xc7, 0x9f };

uint8_t T2_CRED_I[] = {
	0x30, 0x81, 0xee, 0x30, 0x81, 0xa1, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02,
	0x04, 0x62, 0x31, 0x9e, 0xa0, 0x30, 0x05, 0x06, 0x03, 0x2b, 0x65, 0x70,
	0x30, 0x1d, 0x31, 0x1b, 0x30, 0x19, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c,
	0x12, 0x45, 0x44, 0x48, 0x4f, 0x43, 0x20, 0x52, 0x6f, 0x6f, 0x74, 0x20,
	0x45, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x30, 0x1e, 0x17, 0x0d, 0x32,
	0x32, 0x30, 0x33, 0x31, 0x36, 0x30, 0x38, 0x32, 0x34, 0x30, 0x30, 0x5a,
	0x17, 0x0d, 0x32, 0x39, 0x31, 0x32, 0x33, 0x31, 0x32, 0x33, 0x30, 0x30,
	0x30, 0x30, 0x5a, 0x30, 0x22, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x03, 0x55,
	0x04, 0x03, 0x0c, 0x17, 0x45, 0x44, 0x48, 0x4f, 0x43, 0x20, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x45, 0x64, 0x32, 0x35,
	0x35, 0x31, 0x39, 0x30, 0x2a, 0x30, 0x05, 0x06, 0x03, 0x2b, 0x65, 0x70,
	0x03, 0x21, 0x00, 0xed, 0x06, 0xa8, 0xae, 0x61, 0xa8, 0x29, 0xba, 0x5f,
	0xa5, 0x45, 0x25, 0xc9, 0xd0, 0x7f, 0x48, 0xdd, 0x44, 0xa3, 0x02, 0xf4,
	0x3e, 0x0f, 0x23, 0xd8, 0xcc, 0x20, 0xb7, 0x30, 0x85, 0x14, 0x1e, 0x30,
	0x05, 0x06, 0x03, 0x2b, 0x65, 0x70, 0x03, 0x41, 0x00, 0x52, 0x12, 0x41,
	0xd8, 0xb3, 0xa7, 0x70, 0x99, 0x6b, 0xcf, 0xc9, 0xb9, 0xea, 0xd4, 0xe7,
	0xe0, 0xa1, 0xc0, 0xdb, 0x35, 0x3a, 0x3b, 0xdf, 0x29, 0x10, 0xb3, 0x92,
	0x75, 0xae, 0x48, 0xb7, 0x56, 0x01, 0x59, 0x81, 0x85, 0x0d, 0x27, 0xdb,
	0x67, 0x34, 0xe3, 0x7f, 0x67, 0x21, 0x22, 0x67, 0xdd, 0x05, 0xee, 0xff,
	0x27, 0xb9, 0xe7, 0xa8, 0x13, 0xfa, 0x57, 0x4b, 0x72, 0xa0, 0x0b, 0x43,
	0x0b
};

#endif